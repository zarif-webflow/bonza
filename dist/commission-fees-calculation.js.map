{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../node_modules/.pnpm/@taj-wf+utils@1.3.0/node_modules/@taj-wf/utils/dist/index.js", "../src/commission-fees-calculation/constants.ts", "../src/commission-fees-calculation/utils.ts", "../src/commission-fees-calculation/commission-fees-calculation.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener(\"change\", () => location.reload());\r\n", "// src/modules/after-webflow-ready.ts\nvar afterWebflowReady = (callback) => {\n  window.Webflow ||= [];\n  window.Webflow.push(callback);\n};\n\n// src/modules/get-html-element.ts\nvar getHtmlElement = ({\n  selector,\n  parent,\n  log = \"debug\"\n}) => {\n  const targetElement = (parent || document).querySelector(selector);\n  if (targetElement === null) {\n    if (log === false) return null;\n    const consoleMethod = log === \"debug\" ? console.debug : console.error;\n    consoleMethod(\n      `${log.toUpperCase()}: Element with selector \"${selector}\" not found in ${parent !== void 0 ? \"the specified parent element:\" : \"the document.\"}`,\n      parent\n    );\n    return null;\n  }\n  return targetElement;\n};\nvar getMultipleHtmlElements = ({\n  selector,\n  parent,\n  log = \"debug\"\n}) => {\n  const targetElements = Array.from((parent || document).querySelectorAll(selector));\n  if (targetElements.length === 0) {\n    if (log === false) return null;\n    const consoleMethod = log === \"debug\" ? console.debug : console.error;\n    consoleMethod(\n      `${log.toUpperCase()}: No elements found with selector \"${selector}\" in ${parent !== void 0 ? \"the specified parent element:\" : \"the document.\"}`,\n      parent\n    );\n    return null;\n  }\n  return targetElements;\n};\n\n// src/modules/get-active-script.ts\nvar getActiveScript = (importMetaUrl) => {\n  const currentModuleUrl = importMetaUrl;\n  return getHtmlElement({\n    selector: `script[src=\"${currentModuleUrl}\"]`\n  });\n};\n\n// src/modules/get-gsap.ts\nvar getGsap = (plugins = [], log = \"error\") => {\n  let gsapInstance = null;\n  const logFunc = log === \"debug\" ? console.debug : log === \"error\" ? console.error : null;\n  try {\n    gsapInstance = gsap;\n  } catch {\n    logFunc?.(\n      \"GSAP script needs to be imported before this script.\",\n      \"\\n\",\n      \"Get GSAP from here: https://gsap.com/docs/v3/Installation/ \"\n    );\n  }\n  const result = [gsapInstance];\n  for (let i = 0; i < plugins.length; i++) {\n    const plugin = plugins[i];\n    let pluginInstance = null;\n    try {\n      pluginInstance = window[plugin] || null;\n      if (!pluginInstance) {\n        throw new Error();\n      }\n    } catch {\n      logFunc?.(\n        `GSAP ${plugin} plugin script needs to be imported before this script.`,\n        \"\\n\",\n        `Get the ${plugin} plugin from here: https://gsap.com/docs/v3/Installation/ `\n      );\n    }\n    result[i + 1] = pluginInstance;\n  }\n  return result;\n};\n\n// src/modules/set-style.ts\nvar setStyle = (element, styles) => {\n  const prevValues = {};\n  for (const key of Object.keys(styles)) {\n    prevValues[key] = element.style[key];\n    element.style[key] = styles[key] || \"\";\n  }\n  return {\n    revert: () => {\n      Object.assign(element.style, prevValues);\n    }\n  };\n};\n\n// src/modules/wf-custom-page-load-features.ts\nwindow.wfCustomPageLoadFeatures ||= {};\nvar addWFCustomPageLoadFeature = (feature) => {\n  window.wfCustomPageLoadFeatures ||= {};\n  window.wfCustomPageLoadFeatures[feature.name] = feature;\n};\nvar getWFCustomPageLoadFeatures = () => window.wfCustomPageLoadFeatures;\n\nexport { addWFCustomPageLoadFeature, afterWebflowReady, getActiveScript, getGsap, getHtmlElement, getMultipleHtmlElements, getWFCustomPageLoadFeatures, setStyle };\n", "export const AVERAGE_BROKER_FEE = 0.15;\r\nexport const AVERAGE_BROKER_MINIMUM_FEE = 12_000;\r\n\r\nexport const BONZA_FEE = 0.04;\r\nexport const BONZA_MINIMUM_FEE = 4_000;\r\n", "import {\r\n  AVERAGE_BROKER_FEE,\r\n  AVERAGE_BROKER_MINIMUM_FEE,\r\n  BONZA_FEE,\r\n  BONZA_MINIMUM_FEE,\r\n} from \"./constants\";\r\n\r\nexport const calculateCommissionFees = (salePrice: number) => {\r\n  const averageBrokerFee = Math.max(salePrice * AVERAGE_BROKER_FEE, AVERAGE_BROKER_MINIMUM_FEE);\r\n  const bonzaFee = Math.max(salePrice * BONZA_FEE, BONZA_MINIMUM_FEE);\r\n  const savings = averageBrokerFee - bonzaFee;\r\n\r\n  return {\r\n    averageBrokerFee,\r\n    bonzaFee,\r\n    savings,\r\n  };\r\n};\r\n\r\n/**\r\n * Ensures that only numeric input is allowed on an input element\r\n * @param inputElement - The HTML input element to restrict to numbers only\r\n * @param options - Configuration options for the numeric input restriction\r\n */\r\nexport function enforceNumericInput(\r\n  inputElement: HTMLInputElement,\r\n  options: {\r\n    allowDecimals?: boolean;\r\n    allowNegative?: boolean;\r\n    maxDecimals?: number;\r\n  } = {}\r\n): void {\r\n  const { allowDecimals = true, allowNegative = false, maxDecimals = 2 } = options;\r\n\r\n  // Set input type and inputmode for better mobile experience\r\n  inputElement.setAttribute(\"inputmode\", \"numeric\");\r\n\r\n  // Handle keydown events to prevent non-numeric characters\r\n  inputElement.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n    const key = event.key;\r\n    const currentValue = inputElement.value;\r\n    const selectionStart = inputElement.selectionStart || 0;\r\n\r\n    // Allow special keys (backspace, delete, tab, escape, enter, arrows, etc.)\r\n    if (\r\n      key === \"Backspace\" ||\r\n      key === \"Delete\" ||\r\n      key === \"Tab\" ||\r\n      key === \"Escape\" ||\r\n      key === \"Enter\" ||\r\n      key === \"ArrowLeft\" ||\r\n      key === \"ArrowRight\" ||\r\n      key === \"ArrowUp\" ||\r\n      key === \"ArrowDown\" ||\r\n      key === \"Home\" ||\r\n      key === \"End\" ||\r\n      (event.ctrlKey && (key === \"a\" || key === \"c\" || key === \"v\" || key === \"x\" || key === \"z\"))\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    // Allow numeric keys (0-9)\r\n    if (/^\\d$/.test(key)) {\r\n      return;\r\n    }\r\n\r\n    // Allow decimal point if enabled and not already present\r\n    if (allowDecimals && key === \".\" && !currentValue.includes(\".\")) {\r\n      return;\r\n    }\r\n\r\n    // Allow comma for thousand separators\r\n    if (key === \",\") {\r\n      return;\r\n    }\r\n\r\n    // Allow minus sign if enabled, only at the beginning, and not already present\r\n    if (allowNegative && key === \"-\" && selectionStart === 0 && !currentValue.includes(\"-\")) {\r\n      return;\r\n    }\r\n\r\n    // Prevent all other characters\r\n    event.preventDefault();\r\n  });\r\n\r\n  // Handle paste events to filter out non-numeric content\r\n  inputElement.addEventListener(\"paste\", (event: ClipboardEvent) => {\r\n    event.preventDefault();\r\n\r\n    const pastedText = event.clipboardData?.getData(\"text\") || \"\";\r\n    const filteredText = filterNumericText(pastedText, {\r\n      allowDecimals,\r\n      allowNegative,\r\n      maxDecimals,\r\n    });\r\n\r\n    if (filteredText) {\r\n      // Insert the filtered text at the current cursor position\r\n      const selectionStart = inputElement.selectionStart || 0;\r\n      const selectionEnd = inputElement.selectionEnd || 0;\r\n      const currentValue = inputElement.value;\r\n\r\n      const newValue =\r\n        currentValue.substring(0, selectionStart) +\r\n        filteredText +\r\n        currentValue.substring(selectionEnd);\r\n\r\n      inputElement.value = newValue;\r\n\r\n      // Set cursor position after the inserted text\r\n      const newCursorPosition = selectionStart + filteredText.length;\r\n      inputElement.setSelectionRange(newCursorPosition, newCursorPosition);\r\n\r\n      // Trigger input event for any listeners\r\n      inputElement.dispatchEvent(new Event(\"input\", { bubbles: true }));\r\n    }\r\n  });\r\n\r\n  // Handle input events to validate and clean the value\r\n  inputElement.addEventListener(\"input\", () => {\r\n    const currentValue = inputElement.value;\r\n    const filteredValue = filterNumericText(currentValue, {\r\n      allowDecimals,\r\n      allowNegative,\r\n      maxDecimals,\r\n    });\r\n\r\n    if (currentValue !== filteredValue) {\r\n      const cursorPosition = inputElement.selectionStart || 0;\r\n      inputElement.value = filteredValue;\r\n\r\n      // Restore cursor position, adjusting for any removed characters\r\n      const lengthDifference = currentValue.length - filteredValue.length;\r\n      const newCursorPosition = Math.max(0, cursorPosition - lengthDifference);\r\n      inputElement.setSelectionRange(newCursorPosition, newCursorPosition);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Filters text to keep only numeric characters based on the provided options\r\n * @param text - The text to filter\r\n * @param options - Configuration options for filtering\r\n * @returns The filtered numeric text\r\n */\r\nfunction filterNumericText(\r\n  text: string,\r\n  options: {\r\n    allowDecimals?: boolean;\r\n    allowNegative?: boolean;\r\n    maxDecimals?: number;\r\n  }\r\n): string {\r\n  const { allowDecimals = true, allowNegative = false, maxDecimals = 2 } = options;\r\n\r\n  let filtered = text;\r\n\r\n  // Remove all non-numeric characters except decimal point, minus sign, and commas\r\n  let pattern = \"[^0-9\";\r\n  if (allowDecimals) pattern += \".\";\r\n  if (allowNegative) pattern += \"-\";\r\n  pattern += \",]\";\r\n\r\n  filtered = filtered.replace(new RegExp(pattern, \"g\"), \"\");\r\n\r\n  // Handle negative sign: only allow one at the beginning\r\n  if (allowNegative) {\r\n    const minusCount = (filtered.match(/-/g) || []).length;\r\n    if (minusCount > 1) {\r\n      // Keep only the first minus sign if it's at the beginning\r\n      const firstMinus = filtered.indexOf(\"-\");\r\n      if (firstMinus === 0) {\r\n        filtered = \"-\" + filtered.substring(1).replace(/-/g, \"\");\r\n      } else {\r\n        filtered = filtered.replace(/-/g, \"\");\r\n      }\r\n    } else if (minusCount === 1 && filtered.indexOf(\"-\") !== 0) {\r\n      // Move minus to the beginning if it's not already there\r\n      filtered = \"-\" + filtered.replace(\"-\", \"\");\r\n    }\r\n  }\r\n\r\n  // Handle decimal point: only allow one\r\n  if (allowDecimals) {\r\n    const decimalCount = (filtered.match(/\\./g) || []).length;\r\n    if (decimalCount > 1) {\r\n      const firstDecimal = filtered.indexOf(\".\");\r\n      filtered =\r\n        filtered.substring(0, firstDecimal + 1) +\r\n        filtered.substring(firstDecimal + 1).replace(/\\./g, \"\");\r\n    }\r\n\r\n    // Limit decimal places\r\n    const decimalIndex = filtered.indexOf(\".\");\r\n    if (decimalIndex !== -1 && filtered.length > decimalIndex + maxDecimals + 1) {\r\n      filtered = filtered.substring(0, decimalIndex + maxDecimals + 1);\r\n    }\r\n  }\r\n\r\n  // Handle commas: format as thousand separators\r\n  filtered = formatWithCommas(filtered, allowDecimals);\r\n\r\n  return filtered;\r\n}\r\n\r\n/**\r\n * Formats a numeric string with proper comma placement for thousand separators\r\n * @param value - The numeric string to format\r\n * @param allowDecimals - Whether decimals are allowed\r\n * @returns The formatted string with proper comma placement\r\n */\r\nexport function formatWithCommas(value: string, allowDecimals: boolean): string {\r\n  if (!value) return value;\r\n\r\n  // Handle negative sign\r\n  const isNegative = value.startsWith(\"-\");\r\n  const workingValue = isNegative ? value.substring(1) : value;\r\n\r\n  // Split into integer and decimal parts\r\n  const parts = workingValue.split(\".\");\r\n  let integerPart = parts[0] || \"\";\r\n  const decimalPart = allowDecimals && parts[1] ? \".\" + parts[1] : \"\";\r\n\r\n  // Remove existing commas from integer part\r\n  integerPart = integerPart.replace(/,/g, \"\");\r\n\r\n  // Add commas to integer part (every 3 digits from right)\r\n  if (integerPart.length > 3) {\r\n    integerPart = integerPart.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\");\r\n  }\r\n\r\n  // Reconstruct the value\r\n  const result = (isNegative ? \"-\" : \"\") + integerPart + decimalPart;\r\n  return result;\r\n}\r\n", "import { getHtmlElement, getMultipleHtmlElements } from \"@taj-wf/utils\";\r\n\r\nimport { calculateCommissionFees, enforceNumericInput, formatWithCommas } from \"./utils\";\r\n\r\nconst initCommissionFeesCalculation = () => {\r\n  const salePriceInput = getHtmlElement<HTMLInputElement>({\r\n    selector: \"[commission-fees=sale-input]\",\r\n    log: \"error\",\r\n  });\r\n\r\n  const savingsDisplay = getHtmlElement<HTMLElement>({\r\n    selector: \"[commission-fees=savings-display]\",\r\n    log: \"error\",\r\n  });\r\n\r\n  const calcButton = getHtmlElement<HTMLButtonElement>({\r\n    selector: \"[commission-fees=calc-button]\",\r\n    log: \"error\",\r\n  });\r\n\r\n  if (!salePriceInput || !savingsDisplay || !calcButton) return;\r\n\r\n  enforceNumericInput(salePriceInput, {\r\n    allowDecimals: false,\r\n    allowNegative: false,\r\n    maxDecimals: 0,\r\n  });\r\n\r\n  const changeInputValue = (value: string) => {\r\n    salePriceInput.value = \"120,000\";\r\n    salePriceInput.value = value;\r\n    salePriceInput.dispatchEvent(new Event(\"input\"));\r\n  };\r\n\r\n  const handleCalculation = () => {\r\n    const parsedSalePrice = parseInt(salePriceInput.value.replace(/,/g, \"\"), 10);\r\n\r\n    const calculatedValues = calculateCommissionFees(\r\n      Number.isNaN(parsedSalePrice) ? 0 : parsedSalePrice\r\n    );\r\n\r\n    savingsDisplay.textContent = `${formatWithCommas(Math.floor(calculatedValues.savings).toString(), false)}`;\r\n  };\r\n\r\n  calcButton.addEventListener(\"click\", handleCalculation);\r\n\r\n  salePriceInput.addEventListener(\"keydown\", (event) => {\r\n    if (event.key === \"Enter\") {\r\n      handleCalculation();\r\n    }\r\n  });\r\n\r\n  const setupQuickExampleButtons = () => {\r\n    const exampleButtons = getMultipleHtmlElements<HTMLButtonElement>({\r\n      selector: \"[commission-example-price]\",\r\n    });\r\n\r\n    if (!exampleButtons) return;\r\n\r\n    for (const button of exampleButtons) {\r\n      const examplePrice = button.getAttribute(\"commission-example-price\");\r\n      if (!examplePrice) continue;\r\n\r\n      button.addEventListener(\"click\", () => {\r\n        changeInputValue(examplePrice);\r\n        handleCalculation();\r\n      });\r\n    }\r\n  };\r\n\r\n  setupQuickExampleButtons();\r\n};\r\n\r\ninitCommissionFeesCalculation();\r\n"],
  "mappings": "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",
  "names": []
}
